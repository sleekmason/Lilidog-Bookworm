#!/bin/bash

if : >/dev/tcp/8.8.8.8/53; then
PROGNAME="xupdate2"
[ "$USER" != "root" ] && 
   echo -e "[0;31m\t$PROGNAME must be run as root, or with 'sudo $PROGNAME'[0m" && exit

red='[31m'
green='[32m'
blue='[34m'
yellow='[33m'
reset='[0m'


# Function For Finding The Fastest Debian Mirror
_UPDATE_MIRROR() {
	echo " ${blue}--------------------------------------------"
    echo "   ${green}Finding The Fastest Debian Mirror ..."${reset}
    echo
    sleep .7
    if [ $(dpkg-query -W -f='${Status}' conky-all 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  sudo apt update && sudo apt install -y netselect-apt;
fi
		        rm -rf /tmp/sourcechanger
		        mkdir /tmp/sourcechanger
		          if [ ! -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list" "/etc/apt/sources.list-original.bak"
                  fi
                  if [ -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                  fi
                netselect-apt -o /tmp/sourcechanger/sources.list
                grep -o -m1 'http[s]\?://[^ ]\+' /tmp/sourcechanger/sources.list > /tmp/sourcechanger/sources.txt
                sed -i 's/.$//' /tmp/sourcechanger/sources.txt
                  if grep -q "http://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/http:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  elif grep -q "https://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/https:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  else
                     echo "   [0;31mOriginal debian mirrors not found. exiting.[0m"
                  exit 0
                  fi
                  if apt-get update -eany; then
                     echo
                     echo "   [0;32mSuccess! Enjoy your new debian mirror.[0m"
                     echo
                  else
                     echo
                     echo "   [0;31mSomething is not quite right - defaulting to original sources.list.[0m"
                     echo
                     sleep 2
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                     apt update
                  fi
}

# Function For Update Packages
_UPDATE() {
		echo " ${blue}--------------------------------------------"
    echo "   ${blue}Updating Packages ..."${reset}
    echo
    sleep .7
if [[ $(command -v nala) ]]; then
    nala update && nala list --upgradable
else
    apt-get update && apt list --upgradable
fi
}

# Function For View Package Upgrades
_LIST_UPGRADES() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Viewing Upgrades ..."${reset}
	echo
	
	sleep .7
if [[ $(command -v nala) ]]; then	
    nala list --upgradable
else
	apt list --upgradable
fi
}

# Function For Upgrade Packages
_UPGRADE_PACKAGES() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Upgrading Packages ..."${reset}
	echo
	sleep .7
if [[ $(command -v nala) ]]; then	
    nala upgrade
else
	apt-get upgrade
fi
}

# Function For Autoremove Packages
_AUTOREMOVE() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Autoremoving Packages ..."${reset}
	echo
	sleep .7
if [[ $(command -v nala) ]]; then	
    nala autoremove
else
	apt-get autoremove
fi
}

# Function For Clear Thumbnail Caches
_THUMBNAILS() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Clearing Thumbnail Caches ..."${reset}
	echo
	sleep .7
    for i in ".thumbnails" ".cache/thumbnails" ; do
		   for j in "*/*.png" "*/*/*.png" ; do
			[ "$_quiet" != "yes" ]  &&
			rm -v /home/"${SUDO_USER}"/${i}/"${j}" > /dev/null 2>&1 ||
		        rm /home/"${SUDO_USER}"/${i}/"${j}" > /dev/null 2>&1
		   done
		done ; true
}

# Function For Clear Recently Used List
_RECENTLY_USED() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Clearing The Recently Used List ..."${reset}
	echo
	sleep .7
    dd bs=1 count=1 status=none if=/dev/null of=/home/"${SUDO_USER}"/.local/share/recently-used.xbel
		chown "${SUDO_USER}":"${SUDO_USER}" /home/"${SUDO_USER}"/.local/share/recently-used.xbel
}

# Function For Cache Icon Themes
_ICON_CACHE() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Caching Icon Themes ..."${reset}
	sleep .7
    update-icon-caches /usr/share/icons/*
}

# Function For Trim SSD Drives
_TRIM() {
	echo " ${blue}--------------------------------------------"
	echo "   ${blue}Trimming SSD Drives ..."${reset}
	sleep .7
    for mnt in $(grep -E "(ext2|ext3|ext4)" /etc/mtab | cut -f2 -d" ")
		    do fstrim "${mnt}" &>/dev/null &&
			echo -e " Completed fstrim for \"${mnt}\"" ||
			echo -e " No fstrim required for \"${mnt}\""
		    done
}

# Function For Exit This Dialog
_EXIT() {
	echo " ${blue}--------------------------------------------"
	echo "   ${green}Exiting The Dialog ..."${reset}
}

# Main menu loop
while true; do
    # Display the menu
    echo " ${blue}--------------------------------------------"
    echo "   ${blue}Select from the available options below:"${reset}
    echo
    echo "    ${green}1. Find the fastest debin mirror using netselect-apt?"${reset}
    echo "    ${green}2. Check apt repositories for package updates?"${reset}
    echo "    ${green}3. Install available package upgrades?"${reset}
    echo "    ${green}4. Autoremove any unneeded leftover packages?"${reset}
    echo "    ${green}5. Clear the thumbnail caches?"${reset}
    echo "    ${green}6. Clear the \"Recently Used\" list?"${reset}
    echo "    ${green}7. Update icon caches?"${reset}
    echo "    ${green}8. For SSD's - Trim eligible ext2/3/4 filesystems?"${reset}
    echo
    echo "    ${green}9. Exit This dialog?"${reset}
    echo
    read -p "   ${yellow}Enter option number:" option
    echo
    case $option in
        1)
            "_UPDATE_MIRROR"
            ;;
        2)
            "_UPDATE"
            ;;
        3)
            "_UPGRADE_PACKAGES"
            ;;
        4)
            "_AUTOREMOVE"
            ;;            
        5)
            "_THUMBNAILS"
            ;;                
        6)
            "_RECENTLY_USED"         
            ;;
        7)
            "_ICON_CACHE"        
            ;;
        8)
            "_TRIM"      
            ;;
        9)
            echo "   ${blue}----------------------"
            echo
            echo "        ${blue}- Finished -"${reset}
            echo
            echo "   ${blue}----------------------"
            echo
            exit 0
            ;;
        *)
            echo
            echo "${red}Invalid option! Please select a valid option"${reset}
            echo
            ;;
    esac
done
echo
else
echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
 echo ""
 echo "   [0;33mNo Internet connection. Please connect and try again.[0m"
 echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
echo ""
fi
read -r -n1 -p " Press any key to quit this dialog ... "

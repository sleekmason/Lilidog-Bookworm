#!/bin/bash
# Adapted to lilidog use by sleekmason 12-03-2022
### Check for live and if so, exit.
full_fs=$(df ~ | tail -1 | awk '{print $1;}')  # find partition
fs=$(basename "$full_fs")
if grep -q "$fs" /proc/partitions; then
if : >/dev/tcp/8.8.8.8/53; then
PROGNAME="ld-entry"
[ "$USER" != "root" ] &&
   echo -e "[0;31m\t$PROGNAME should be run with 'sudo $PROGNAME -i'[0m" && exit

### Our options are going to be
#    = "full output to the terminal, no stopping."
# -i = "interactive"
# -q = "interactive but suppressed output"
OPTIND="0"
for i in  _quiet _interactive ; do unset -v $i ; done

while getopts 'iq' OPTION; do
    case "$OPTION" in
      i)
	_interactive="yes"
	echo ""
	echo -e " [0;32m--------------------------------------------------[0m"
	echo ""
	echo -e " [0;32m\n Entering interactive script to customize Lilidog.\n[0m"
	echo -e " [0;33m--------------------------------------------------[0m"
	echo -e " [0;33m\n Please use letters 'y' or 'n' for selections.\n[0m"
	echo -e " [0;33m--------------------------------------------------[0m"
	echo ""
	break
      ;;

      q)
	_quiet="yes"
	echo -e " [0;32mEntering interactive mode, without verbose output.\n[0m"
	break
      ;;

      ?)
	echo "Usage: $(basename ${PROGNAME}) [-i = interactive] [-q = suppressed ouput]"
	return 1
      ;;
  esac
done

[ "$(which nala)" ] && PkgMgr="nala" || PkgMgr="apt"

see_it() {
	[ "$_interactive" = "yes" ] && ( read -r -n1 -p " $_msg \"Y/n\" " answ
	[ -z "$answ" ] || [ "$answ" = "y" ] || [ "$answ" = "Y" ] && echo &&
	do_it &&
	echo -e " [0;32m$_msg - Completed.\n[0m" ||
	echo -e "[0;32m\r $_msg - Skipped.\n[0m" )
}

no_see() {
	[ "$_quiet" = "yes"       ] && ( read -r -n1 -p " $_msg \"Y/n\" " answ
	[ -z "$answ" ] || [ "$answ" = "y" ] || [ "$answ" = "Y" ] && echo &&
	do_it > /dev/null &&
	echo -e " [0;32m$_msg - Completed.\n[0m" ||
	echo -e "[0;32m\r $_msg - Skipped.\n[0m" )
}

run_it() {
	[ "$_interactive" != "yes" ] && [ "$_quiet" != "yes" ] && (
	echo -e "\n $_msg" &&
	do_it &&
	echo -e "[0;32m $_msg - Completed.[0m" )
}

# Begin functions 
_update() {
      _msg="Update current packages before proceeding?"
      do_it() { 
		[ "$_quiet" != "yes" ] &&
		apt-get update && apt-get -y upgrade
}
	see_it
	no_see
	run_it
}

_remove_packages() {
      _msg="Remove Cryptsetup and related packages?"
      do_it() { apt-get remove -y cryptsetup cryptsetup-initramfs cryptsetup-bin ;}
        see_it
        no_see
        run_it
}

_add_backports() {
      _msg="Add backports repositories and run Apt to update?"
      do_it() { echo 'deb http://deb.debian.org/debian bookworm-backports main' | tee /etc/apt/sources.list.d/bookworm-backports.list &&
		        apt-get update ;}
        see_it
        no_see
        run_it
}

_upgrade_kernel() {
      _msg="Install backports kernel? (Also adds repositories)"
      do_it() { echo 'deb http://deb.debian.org/debian bookworm-backports main' | tee /etc/apt/sources.list.d/bookworm-backports.list &&
		        apt-get update && apt-get install -y -t bookworm-backports linux-image-amd64/bookworm-backports linux-headers-amd64/bookworm-backports firmware-linux ;}
        see_it
        no_see
        run_it
}

_add_slick() {
      _msg="Install and use lightdm slick-greeter instead of default?"
      do_it() { apt-get update && apt-get install -y lightdm lightdm-settings slick-greeter &&
		        cp -f /usr/share/lilidog/extras/slick-lightdm/slick-greeter.conf /etc/lightdm
                cp -f /usr/share/lilidog/extras/slick-lightdm/50-slick-greeter.conf /usr/share/lightdm/lightdm.conf.d
		        ## Toggle to lightdm-greeter
                sed -i '/greeter-session=.*/d' "/etc/lightdm/lightdm.conf"
                sed -i '108a greeter-session=slick-greeter' "/etc/lightdm/lightdm.conf"
                 if [[ $(command -v lightdm) ]]; then
                   if grep -Fxq 'exec "$session"' /home/"${SUDO_USER}"/.xsessionrc; then
                   sed -i 's/^exec "$session"/#exec "$session"/' /home/"${SUDO_USER}"/.xsessionrc
                   fi
                 fi
		        sed -i 's/^exec startx/#exec startx/g' /home/"${SUDO_USER}"/.profile ;}
      
        see_it
        no_see
        run_it
}

_sourcechanger() {
      _msg="Use netselect-apt to find a faster debian mirror?"
      do_it() { apt install -y netselect-apt
		        rm -rf /tmp/sourcechanger
		        mkdir /tmp/sourcechanger
		          if [ ! -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list" "/etc/apt/sources.list-original.bak"
                  fi
                  if [ -e "/etc/apt/sources.list-original.bak" ]; then
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                  fi
                netselect-apt -o /tmp/sourcechanger/sources.list
                grep -o -m1 'http[s]\?://[^ ]\+' /tmp/sourcechanger/sources.list > /tmp/sourcechanger/sources.txt
                sed -i 's/.$//' /tmp/sourcechanger/sources.txt
                  if grep -q "http://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/http:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  elif grep -q "https://deb.debian.org/debian" <(head -n 4 "/etc/apt/sources.list-original.bak"); then
                     sed -i -e "s/https:\/\/deb.debian.org\/debian/$(sed 's:/:\\/:g' /tmp/sourcechanger/sources.txt)/" /etc/apt/sources.list
                  else
                     echo "   [0;31mOriginal debian mirrors not found. exiting.[0m"
                  exit 0
                  fi
                  if apt-get update -eany; then
                     echo
                     echo "   [0;32mSuccess! Enjoy your new debian mirror.[0m"
                     echo
                  else
                     echo
                     echo "   [0;31mSomething is not quite right - defaulting to original sources.list.[0m"
                     echo
                     sleep 2
                     cp -f "/etc/apt/sources.list-original.bak" "/etc/apt/sources.list"
                     apt update
                  fi ;}
        see_it
        no_see
        run_it
}

_osprober() {
      _msg="Enable osprober to find other distro entries in grub?"
      do_it() { sed -i 's/^#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/g' "/etc/default/grub" &&
		        update-grub ;}
        see_it
        no_see
        run_it
}

_firmware() {
      _msg="Install isenkram-cli to check for missing firmware?"
      do_it() { apt update && sudo apt install -y isenkram-cli &&
		isenkram-autoinstall-firmware ;}
        see_it
        no_see
        run_it
}

_autologin() {
      _msg="Enable autologin? (sudo password required)"
      do_it() { sudo -u "${SUDO_USER}" 'lightdm-autologin' ;}
        see_it
        no_see
        run_it
}

_reboot() {
      _msg="Reboot? - (Y if new kernel or lightdm change.)"
      do_it() { sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
		  if ! grep hypervisor /proc/cpuinfo ; then
          sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
          fi
          reboot ;}
        see_it
        no_see
        run_it
}

if grep -q "#GRUB_DISABLE_OS_PROBER=false" "/etc/default/grub"; then
_update
_remove_packages
_add_backports
_upgrade_kernel
_add_slick
_sourcechanger
_osprober
_firmware
#_autologin
_reboot
sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
if ! grep hypervisor /proc/cpuinfo ; then
sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
fi
else
_update
_remove_packages
_add_backports
_upgrade_kernel
_add_slick
_sourcechanger
_firmware
#_autologin
_reboot
sed -i '/welcome-backend.sh.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
if ! grep hypervisor /proc/cpuinfo ; then
sed -i '/vmrestore.*/d' /home/"${SUDO_USER}"/.config/openbox/autostart
fi
fi
[ "$_interactive" = "yes" ] &&
echo
echo
echo $'\n\nPress any key to quit ...'; read -srn1
echo
else
echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
 echo ""
 echo "   [0;33mNo Internet connection. Please connect and try again.[0m"
 echo ""
 echo "   [0;31m-----------------------------------------------------[0m"
echo ""
echo $'\n\nPress any key to quit ...'; read -srn1
fi
else
 echo "   [0;32m-------------------------------------------------------"
 echo ""
 echo "   Entry script cannot be used in a live environment."
 echo "   Install and try again!"
 echo ""
 echo "   -------------------------------------------------------[0m"
 echo ""
echo $'\n\nPress any key to quit ...'; read -srn1
fi
